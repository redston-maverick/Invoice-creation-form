{"remainingRequest":"/home/redstonmaverick/Desktop/Bilte-Form/bilte-form/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/redstonmaverick/Desktop/Bilte-Form/bilte-form/src/App.vue?vue&type=template&id=7ba5bd90&scoped=true&","dependencies":[{"path":"/home/redstonmaverick/Desktop/Bilte-Form/bilte-form/src/App.vue","mtime":1611167100674},{"path":"/home/redstonmaverick/Desktop/Bilte-Form/bilte-form/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/redstonmaverick/Desktop/Bilte-Form/bilte-form/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/redstonmaverick/Desktop/Bilte-Form/bilte-form/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/redstonmaverick/Desktop/Bilte-Form/bilte-form/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}